<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>CompPrev</name>
  </assembly>
  <members>
    <member name="N:CompPrev">
    </member>
    <member name="T:CompPrev._Default">
    </member>
    <member name="M:CompPrev._Default.Page_Load(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="M:CompPrev._Default.getJSONComparisonTable(System.String)">
      <summary>
returns the comparison table between two or many objects sent in the URIs String</summary>
      <returns>
string of an JSON table contains the comparison between sent objects</returns>
      <param name="URIs">
URIs comma separated URIs to be compared</param>
    </member>
    <member name="M:CompPrev._Default.getComparisonElements(System.String)">
      <summary>
returns the comparison table between two or many objects sent in the URIs String</summary>
      <returns>
string of an JSON table contains the comparison between sent objects</returns>
      <param name="URIs">
URIs comma separated URIs to be compared</param>
    </member>
    <member name="M:CompPrev._Default.getRelations(System.String)">
      <summary>
takes the URIs as comma separated , initialize Object relation manager , returns JSON object with the 1st 5 relations</summary>
      <returns>
returns a json object containing all the relations between the sent objects</returns>
      <param name="URIs">
String object of URIs comma separated</param>
    </member>
    <member name="M:CompPrev._Default.getNextRelation">
      <summary>
returns a string of a JSON object that contains the next relation to be drawn</summary>
      <returns>
a string of JSON object to be drawn</returns>
    </member>
    <member name="M:CompPrev._Default.previewObject(System.String)">
      <summary>
returns a string of a JSON object that contains the next relation to be drawn</summary>
      <returns>
returns a JSON object contains array of Results to be preview</returns>
      <param name="URIs">
String object of comma separated URIs</param>
    </member>
    <member name="N:CompPrev.Account">
    </member>
    <member name="T:CompPrev.Account.ChangePassword">
    </member>
    <member name="M:CompPrev.Account.ChangePassword.Page_Load(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="N:ObjectsRelationFactory">
    </member>
    <member name="T:ObjectsRelationFactory.ObjectsPreviewManager">
    </member>
    <member name="M:ObjectsRelationFactory.ObjectsPreviewManager.run(System.String)">
      <param name="URI">
</param>
    </member>
    <member name="M:ObjectsRelationFactory.ObjectsPreviewManager.generateQueries(System.String)">
      <param name="URI">
</param>
    </member>
    <member name="M:ObjectsRelationFactory.ObjectsPreviewManager.getResultsAsStrings(System.Collections.Generic.List{System.String},System.String)">
      <param name="queries">
</param>
      <param name="obj">
</param>
    </member>
    <member name="M:ObjectsRelationFactory.ObjectsPreviewManager.getListofPreviewJsonObjs(System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
      <param name="input">
</param>
    </member>
    <member name="M:ObjectsRelationFactory.ObjectsPreviewManager.convertResultSetListToStrings(System.Collections.Generic.List{VDS.RDF.Query.SparqlResultSet},System.String)">
      <summary>
converts a list of sparqlResultSet to a list of list of strings</summary>
      <returns>
the list of list of results as strings</returns>
      <param name="resultSet">
the input list of sparql resultset</param>
      <param name="obj">
the main object to reference</param>
    </member>
    <member name="T:CompPrev.Account.Login">
    </member>
    <member name="M:CompPrev.Account.Login.Page_Load(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="T:ObjectsRelationFactory.SPARQLQueryBuilder">
    </member>
    <member name="M:ObjectsRelationFactory.SPARQLQueryBuilder.#ctor">
      <summary>
The constructor of the class, initiates the vars</summary>
    </member>
    <member name="M:ObjectsRelationFactory.SPARQLQueryBuilder.buildQueries(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Int32)">
      <summary>
Builds and returns a set of queries to find relations between two object1 and object2.</summary>
      <returns>
List of Queries to be queried</returns>
      <param name="object1">
object1</param>
      <param name="object2">
object2</param>
      <param name="maxDistance">
MaxiumDistance between the two objects</param>
      <param name="limit">
Limit of results</param>
      <param name="ignoredObjects">
List of strings of names of objects be ignored in the Queries</param>
      <param name="ignoredProperties">
List of strings of names of properties to be ignored in the Queries</param>
      <param name="avoidCycles">
Integer value which indicates whether we want to suppress cycles , 0 = no cycle avoidance , 1 = no intermediate object can be object1 or object2 , 2 = like 1 + an object can not occur more than once in a connection</param>
    </member>
    <member name="M:ObjectsRelationFactory.SPARQLQueryBuilder.direct(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
      <summary>
Returns a query for getting a direct connection from $object1 to $object2.</summary>
      <returns>
String contains the Generated Queries</returns>
      <param name="object1">
the first object</param>
      <param name="object2">
the second object</param>
      <param name="distance">
distance between obj1 and obj2</param>
      <param name="options">
Options parameters object1,object2,contains,ignoredObjects,ignoredProperties,avoidCycles</param>
    </member>
    <member name="M:ObjectsRelationFactory.SPARQLQueryBuilder.completeQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
      <summary>
is thefunction that takes the Sparql Query from Direct and ConnectViamiddleObject functions and complete it it takes the part after where {.... , and completes it depending on the options</summary>
      <returns>
returns the total complete Query with the Filter and Limit options</returns>
      <param name="coreQuery">
</param>
      <param name="options">
Options parameters object1,object2,contains,ignoredObjects,ignoredProperties,avoidCycles</param>
      <param name="vars">
Vars containing the all the variables in the predicates and the objects to be used in the filter function</param>
    </member>
    <member name="M:ObjectsRelationFactory.SPARQLQueryBuilder.getQueries(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Int32)">
      <summary>
Return a set of queries to find relations between two objects.</summary>
      <returns>
A two dimensional array of the form $array[$distance][$queries]</returns>
      <param name="object1">
First object</param>
      <param name="object2">
Second object</param>
      <param name="maxDistance">
maxDistance The maximum distance up to which we want to search</param>
      <param name="limit">
limit The maximum number of results per SPARQL query (=LIMIT).</param>
      <param name="ignoredObjects">
Objects which should not be part of the returned connections between the first and second object</param>
      <param name="ignoredProperties">
Properties which should not be part of the returned connections between the first and second object</param>
      <param name="avoidCycles">
Integer value which indicates whether we want to suppress cycles , 0 = no cycle avoidance , 1 = no intermediate object can be object1 or object2 , 2 = like 1 + an object can not occur more than once in a connection</param>
    </member>
    <member name="M:ObjectsRelationFactory.SPARQLQueryBuilder.connectedViaAMiddleObject(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
      <summary>
Return a set of queries to find relations between two objects which are connected via a middle objects $dist1 and $dist2 give the distance between the first and second object to the middle they have ti be greater that 1</summary>
      <param name="first">
</param>
      <param name="second">
</param>
      <param name="dist1">
</param>
      <param name="dist2">
</param>
      <param name="toObject">
</param>
      <param name="options">
</param>
    </member>
    <member name="M:ObjectsRelationFactory.SPARQLQueryBuilder.generateFilter(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
      <summary>
generates the necessary Filters</summary>
      <returns>
returns the Filter part of the query</returns>
      <param name="options">
The options Dictionary</param>
      <param name="vars">
The vars Dictionary</param>
    </member>
    <member name="M:ObjectsRelationFactory.SPARQLQueryBuilder.listToString(System.Collections.Generic.List{System.String})">
      <summary>
takes a list and converts it to a string(list must be of count 1)</summary>
      <returns>
first string of the list</returns>
      <param name="inputList">
takes the input list</param>
    </member>
    <member name="M:ObjectsRelationFactory.SPARQLQueryBuilder.stringToLoist(System.String)">
      <summary>
takes a string and converts it to a list of strings of count1</summary>
      <returns>
list of count 1</returns>
      <param name="input">
the intput string</param>
    </member>
    <member name="M:ObjectsRelationFactory.SPARQLQueryBuilder.uri(System.String)">
      <summary>
takes the object name and returns the URI link to easily use in Sparql Query</summary>
      <returns>
string the URI</returns>
      <param name="x">
string the object name</param>
    </member>
    <member name="M:ObjectsRelationFactory.SPARQLQueryBuilder.toPattern(System.String,System.String,System.String,System.Boolean)">
      <summary>
this function puts the query terms subject, predicate, object</summary>
      <param name="s">
the subject</param>
      <param name="p">
the predicate</param>
      <param name="o">
the object</param>
      <param name="toObject">
</param>
    </member>
    <member name="M:ObjectsRelationFactory.SPARQLQueryBuilder.expandTerms(System.Collections.Generic.List{System.String},System.String)">
      <param name="terms">
</param>
      <param name="ooperator">
</param>
    </member>
    <member name="N:Comparison_Part">
    </member>
    <member name="T:Comparison_Part.Comparison">
      <summary>
Contains all comparison elements and handles all operations to do the comparison and store each comparison element result in it.</summary>
    </member>
    <member name="M:Comparison_Part.Comparison.#ctor(System.Collections.Generic.List{System.String})">
      <summary>
Creates new comprison between elements where comparison elements are represented in strings.</summary>
      <param name="elementURI">
List of comparison element uri</param>
    </member>
    <member name="M:Comparison_Part.Comparison.SetComparisonElementList">
      <summary>
Creates list of comparison elements of type ComparisonElement given its uri,node and graph.</summary>
    </member>
    <member name="M:Comparison_Part.Comparison.SetCommonPredicate">
      <summary>
Creates list of common predicates between comparison elements where where the element is the subject and another list where the element is the object.</summary>
    </member>
    <member name="M:Comparison_Part.Comparison.SetObjectSubject_String">
      <summary>
Sets the label of the values(objects or subjects) of the common predicates for each comparison element.</summary>
    </member>
    <member name="P:Comparison_Part.Comparison.CommonPredicate_Subject">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Comparison_Part.Comparison.ComparisonElement">
      <summary>
Returns list of comparison elements of type ComparisonElement.</summary>
    </member>
    <member name="P:Comparison_Part.Comparison.CommonPredicate_SubjectLabel">
      <summary>
Returns list of labels of common predicates between comparison elements where where the element is the subject.</summary>
    </member>
    <member name="P:Comparison_Part.Comparison.CommonPredicate_Object">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Comparison_Part.Comparison.CommonPredicate_ObjectLabel">
      <summary>
Returns list of labels of common predicates between comparison elements where where the element is the object ("is predicate of").</summary>
    </member>
    <member name="T:ObjectsRelationFactory.QueryProcessor">
    </member>
    <member name="M:ObjectsRelationFactory.QueryProcessor.startConnection">
      <summary>
starts connection with the server</summary>
    </member>
    <member name="M:ObjectsRelationFactory.QueryProcessor.closeConnection">
      <summary>
closes connection to the server</summary>
    </member>
    <member name="M:ObjectsRelationFactory.QueryProcessor.convertToDbpedia(System.String)">
      <summary>
converts the localhost to dbpedia, not recommended</summary>
      <returns>
the dbpeida link</returns>
      <param name="input">
the localhost input</param>
    </member>
    <member name="M:ObjectsRelationFactory.QueryProcessor.convertToLocalhost(System.String)">
      <summary>
converts any domain name to the localhost:8890</summary>
      <returns>
converted url</returns>
      <param name="input">
url with any domain name</param>
    </member>
    <member name="M:ObjectsRelationFactory.QueryProcessor.getLabelIfAny(System.String)">
      <summary>
Gets label of given node.</summary>
      <returns>
String of the node label</returns>
      <param name="node">
Node</param>
    </member>
    <member name="M:ObjectsRelationFactory.QueryProcessor.getGraphFromURIWithlocalHost(System.String)">
      <summary>
gets the graph from the input Uri(changes the uri to localhost)</summary>
      <returns>
the output graph</returns>
      <param name="input">
the input string uri</param>
    </member>
    <member name="M:ObjectsRelationFactory.QueryProcessor.ExecuteQueryWithInnerQuery(ObjectsRelationFactory.SPARQLQueryBuilder.InnerQuery,System.String,System.String)">
      <summary>
Exectues a certain List of InnerQuery objects</summary>
      <returns>
a list of resultSet one for each innerquery.queryText</returns>
      <param name="input">
the list of innerquery to be queried</param>
      <param name="obj1">
</param>
      <param name="obj2">
</param>
    </member>
    <member name="M:ObjectsRelationFactory.QueryProcessor.setOriginalObjects(ObjectsRelationFactory.ResSetToJSON.innerResult,System.String)">
      <summary>
helper function to manage the changes of the queries first and last objects</summary>
      <param name="temp">
the innerResult object ot set it's first and last object</param>
      <param name="input">
the query string</param>
    </member>
    <member name="M:ObjectsRelationFactory.QueryProcessor.ExecuteQueryWithString(System.String)">
      <summary>
overload of Execute query</summary>
      <param name="input">
the query text as string</param>
    </member>
    <member name="T:ObjectsRelationFactory.ObjectsRelationManager">
    </member>
    <member name="M:ObjectsRelationFactory.ObjectsRelationManager.startConnection">
      <summary>
starts the connection to the server</summary>
    </member>
    <member name="M:ObjectsRelationFactory.ObjectsRelationManager.closeConnection">
      <summary>
closes the connection of the server</summary>
    </member>
    <member name="M:ObjectsRelationFactory.ObjectsRelationManager.generateQueries(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Int32)">
      <summary>
Builds and returns a set of queries to find relations between two object1 and object2.</summary>
      <returns>
false means an error happened, true means it's ok</returns>
      <param name="object1">
object1</param>
      <param name="object2">
object2</param>
      <param name="maxDistance">
MaxiumDistance between the two objects</param>
      <param name="limit">
Limit of results</param>
      <param name="ignoredObjects">
List of strings of names of objects be ignored in the Queries</param>
      <param name="ignoredProperties">
List of strings of names of properties to be ignored in the Queries</param>
      <param name="avoidCycles">
Integer value which indicates whether we want to suppress cycles , 0 = no cycle avoidance , 1 = no intermediate object can be object1 or object2 , 2 = like 1 + an object can not occur more than once in a connection</param>
    </member>
    <member name="M:ObjectsRelationFactory.ObjectsRelationManager.getNextResult">
      <summary>
Query the next result</summary>
      <returns>
the JsonObject of the next result</returns>
    </member>
    <member name="P:ObjectsRelationFactory.ObjectsRelationManager.IsEndOfResults">
      <summary>
Gets a value indicating whether this instance .</summary>
    </member>
    <member name="T:ObjectsRelationFactory.ResSetToJSON">
    </member>
    <member name="M:ObjectsRelationFactory.ResSetToJSON.ToListOfJsonObj(System.Collections.Generic.List{ObjectsRelationFactory.ResSetToJSON.innerResult})">
      <summary>
gets the list of the json objects to be drawn for each query</summary>
      <returns>
the output list of json objects</returns>
      <param name="b">
the result list of each query</param>
    </member>
    <member name="M:ObjectsRelationFactory.ResSetToJSON.ToJsonObj(System.Collections.Generic.List{ObjectsRelationFactory.ResSetToJSON.innerResult})">
      <param name="b">
</param>
    </member>
    <member name="M:ObjectsRelationFactory.ResSetToJSON.namer(System.String)">
      <summary>
renames the string;</summary>
      <param name="URI">
</param>
    </member>
    <member name="M:ObjectsRelationFactory.ResSetToJSON.valuesOfResults(VDS.RDF.Query.SparqlResult)">
      <summary>
we get the values of each result from here</summary>
      <returns>
list of string of all the urls according to the query structure ex:?pf ?middle ?os ?ps</returns>
      <param name="sq">
input sparqlResult</param>
    </member>
    <member name="M:ObjectsRelationFactory.ResSetToJSON.innerResultToURIs(System.Collections.Generic.List{ObjectsRelationFactory.ResSetToJSON.innerResult})">
      <summary>
get the value of each variable</summary>
      <returns>
list of list of urls for each result</returns>
      <param name="inner">
input innerResult list</param>
    </member>
    <member name="M:ObjectsRelationFactory.ResSetToJSON.reArrangeRelationVariables(System.Collections.Generic.List{System.String})">
      <param name="query">
</param>
    </member>
    <member name="M:ObjectsRelationFactory.ResSetToJSON.toJSONNode(System.Collections.Generic.List{System.String})">
      <summary>
get all the results of each variable</summary>
      <returns>
JsonNode of the result</returns>
      <param name="query">
result list of the query</param>
    </member>
    <member name="M:ObjectsRelationFactory.ResSetToJSON.toJSONEdge(System.Collections.Generic.List{System.String})">
      <summary>
get the nodes of each query</summary>
      <returns>
JSonEdge object</returns>
      <param name="query">
Result List of the query</param>
    </member>
    <member name="T:Comparison_Part.ComparisonElement">
      <summary>
ComparisonElement type represents the entities involved in the comparison and holds its comparison data.</summary>
    </member>
    <member name="M:Comparison_Part.ComparisonElement.#ctor(System.String)">
      <summary>
Constructor creates new comparison element.</summary>
      <param name="uri">
URI of the element</param>
    </member>
    <member name="P:Comparison_Part.ComparisonElement.ElementGraph">
    </member>
    <member name="P:Comparison_Part.ComparisonElement.CommonPredicateSubject_Node">
      <summary>
Returns list of subjects of triples that have common predicate between comparison elements and the element node is the object of the triple. or Sets list of subjects of triples that have common predicate between comparison elements and the element node is the object of the triple to a ready made list.</summary>
    </member>
    <member name="P:Comparison_Part.ComparisonElement.CommonPredicateSubject_String">
      <summary>
Returns list of labels of subjects of triples that have common predicate between comparison elements and the element node is the object of the triple. or Sets list of labels of subjects of triples that have common predicate between comparison elements and the element node is the object of the triple to a ready made list.</summary>
    </member>
    <member name="P:Comparison_Part.ComparisonElement.CommonPredicateObject_String">
      <summary>
Returns list of labels of objects of triples that have common predicate between comparison elements and the element node is the subject of the triple. or Sets list of labels of objects of triples that have common predicate between comparison elements and the element node is the subject of the triple to a ready made list.</summary>
    </member>
    <member name="P:Comparison_Part.ComparisonElement.ElementNode">
      <summary>
Returns node of comparison element's graph node;</summary>
    </member>
    <member name="P:Comparison_Part.ComparisonElement.ElementLabel">
      <summary>
Returns a string of comparison element's label.</summary>
    </member>
    <member name="P:Comparison_Part.ComparisonElement.ElementURI">
      <summary>
Returns string of comparison element URI.</summary>
    </member>
    <member name="P:Comparison_Part.ComparisonElement.CommonPredicateObject_Node">
      <summary>
Returns list of objects of triples that have common predicate between comparison elements and the element node is the subject of the triple. or Sets list of objects of triples that have common predicate between comparison elements and the element node is the subject of the triple to a ready made list.</summary>
    </member>
    <member name="T:CompPrev.Account.Register">
    </member>
    <member name="T:CompPrev.Account.ChangePasswordSuccess">
    </member>
    <member name="T:CompPrev.Global">
    </member>
    <member name="M:CompPrev.Global.Application_Start(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="M:CompPrev.Global.Application_End(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="M:CompPrev.Global.Application_Error(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="M:CompPrev.Global.Session_Start(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="M:CompPrev.Global.Session_End(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="N:KwSearch">
    </member>
    <member name="T:KwSearch.KwSearch">
      <summary>
Process search for single word or multiple-words queries</summary>
    </member>
    <member name="M:KwSearch.KwSearch.ParseTextByVs(System.String)">
      <summary>
splits a text by the "vs" keyword and return a List of splitted strings</summary>
      <param name="text">
string to be split</param>
    </member>
    <member name="M:KwSearch.KwSearch.generate_similarkeywords(System.String)">
      <summary>
Generates a list of keywords which are similar to the given keyword with different capiitalizations and formats</summary>
      <returns>
List of similar keywords in addition to the originan keyword</returns>
      <param name="keyword">
The keyword</param>
    </member>
    <member name="M:KwSearch.KwSearch.Find_URIs(System.Collections.Generic.List{System.String})">
      <param name="keywords">
</param>
    </member>
    <member name="M:KwSearch.KwSearch.get_URI_s(System.String)">
      <summary>
get the uris matching with given keywords(single keyword or multiple keywords separated by versus</summary>
      <param name="input_query">
takes the query text whether it contains vs or single keyword</param>
    </member>
    <member name="M:CompPrev.Account.Register.Page_Load(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="M:CompPrev.Account.Register.RegisterUser_CreatedUser(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="M:CompPrev.Account.ChangePasswordSuccess.Page_Load(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="T:CompPrev.SiteMaster">
    </member>
    <member name="M:CompPrev.SiteMaster.Page_Load(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
  </members>
</doc>
